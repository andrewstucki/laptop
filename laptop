#!/bin/sh

# Welcome to the andrew's laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

update_shell() {
  local shell_path;
  shell_path="$(which zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  chsh -s "$shell_path"
}

case "$SHELL" in
  */zsh)
    if [ "$(which zsh)" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

fancy_echo "Updating Homebrew formulae ..."
brew update
brew bundle --file=- <<EOF
cask_args appdir: "/Applications"

tap "caskroom/cask"
tap "homebrew/services"

brew "rbenv"
brew "keybase"
brew "msgpack"
brew "ripgrep"
brew "gcc"
brew "nasm"
brew "automake"
brew "ruby-build"
brew "bazaar"
brew "bazel"
brew "bison"
brew "node"
brew "git"
brew "openssl"
brew "cfssl"
brew "tcpdump"
brew "terraform"
brew "the_silver_searcher"
brew "parallel"
brew "go"
brew "pdsh"
brew "cmake"
brew "gradle"
brew "llvm"
brew "protobuf"
brew "protobuf-c"
brew "xz"
brew "youtube-dl"
brew "qemu"
brew "maven"
brew "kafka"
brew "zookeeper"
brew "qt5"
brew "vim"
brew "yarn"
brew "mercurial"
brew "awscli"
brew "dockutil"
brew "magic-wormhole"
brew "ngrep"

# Databases
brew "postgres", restart_service: true
brew "redis", restart_service: true

cask "atom"
cask "ngrok"
cask "vagrant"
cask "vlc"
cask "spotify"
cask "virtualbox"
cask "wkhtmltopdf"
cask "iterm2"
cask "google-chrome"
cask "firefox"
cask "dropbox"
cask "slack"
cask "caffeine"
EOF

fancy_echo "Configuring Ruby ..."
find_latest_ruby() {
  rbenv install -l | grep -v - | tail -1 | sed -e 's/^ *//'
}

ruby_version="$(find_latest_ruby)"
# shellcheck disable=SC2016
append_to_zshrc 'eval "$(rbenv init - --no-rehash)"' 1
eval "$(rbenv init -)"

if ! rbenv versions | grep -Fq "$ruby_version"; then
  RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/opt/openssl rbenv install -s "$ruby_version"
fi

rbenv global "$ruby_version"
rbenv shell "$ruby_version"
gem update --system
gem_install_or_update 'bundler'
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

append_to_zshrc '# Golang settings'

mkdir -p "$HOME/Code/go"
# shellcheck disable=SC2016
append_to_zshrc 'export GOPATH="$HOME/Code/go"'
# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$PATH:$GOPATH/bin"'

fancy_echo "Installing Atom plugins ..."
apm install atom-handlebars atom-material-syntax atom-material-ui atom-prettify \
 atom-terminal auto-detect-indentation autoclose-html file-icons go-plus jsformat \
 language-diff language-docker language-gradle language-haml language-hcl language-jade \
 language-javascript-jsx language-protobuf language-rust language-x86 pretty-json xml-formatter

mkdir -p "$HOME/.atom"
cat <<EOF > "$HOME/.atom/config.cson"
"*":
  core:
    disabledPackages: []
    projectHome: "$HOME/Code"
    telemetryConsent: "no"
    themes: [
      "atom-material-ui"
      "atom-material-syntax"
    ]
  editor:
    invisibles: {}
    preferredLineLength: 120
    tabType: "soft"
  "exception-reporting":
    userId: "f028ebc3-e12f-0768-8bf7-2f5b5bb0cc22"
  "go-plus":
    syntaxCheckOnSave: false
  jsformat:
    format_on_save: false
  linter: {}
  "tree-view": {}
  welcome:
    showOnStartup: false
EOF

fancy_echo "Setting up Dock shortcuts ..."
dockutil --no-restart --remove all
dockutil --no-restart --add "/Applications/Atom.app"
dockutil --no-restart --add "/Applications/Xcode.app"
dockutil --no-restart --add "/Applications/Spotify.app"
dockutil --no-restart --add "/Applications/Google Chrome.app"
dockutil --no-restart --add "/Applications/iTerm.app"
dockutil --no-restart --add "/Applications/Slack.app"
dockutil --no-restart --add "/Applications/Spark.app"
dockutil --no-restart --add "/Applications/Virtualbox.app"
dockutil --no-restart --add "/Applications/Utilities/Activity Monitor.app"
dockutil --add "/Applications/Calendar.app"

fancy_echo "Setting up terminal aliases and Mac defaults ..."

sudo tmutil disablelocal
sudo scutil --set ComputerName "Laptop"
sudo scutil --set LocalHostName "Laptop"
defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false
defaults write com.apple.screensaver askForPassword -int 1
defaults write com.apple.screensaver askForPasswordDelay -int 0
defaults write com.apple.screencapture location -string "$HOME/Desktop"
defaults write NSGlobalDomain AppleShowAllExtensions -bool true
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true
defaults write com.apple.ActivityMonitor ShowCategory -int 0
defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
chflags nohidden ~/Library

curl -o /etc/hosts https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling-porn/hosts
sudo dscacheutil -flushcache
sudo killall -HUP mDNSResponder
